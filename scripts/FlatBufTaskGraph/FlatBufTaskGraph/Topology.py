# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatBufTaskGraph

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Topology(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Topology()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTopology(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Topology
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Topology
    def Conn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Connection import Connection
            obj = Connection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Topology
    def ConnLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Topology
    def ConnIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Topology
    def Routes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Route import Route
            obj = Route()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Topology
    def RoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Topology
    def RoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def TopologyStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddConn(builder, conn): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(conn), 0)
def TopologyAddConn(builder, conn):
    """This method is deprecated. Please switch to AddConn."""
    return AddConn(builder, conn)
def StartConnVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TopologyStartConnVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConnVector(builder, numElems)
def AddRoutes(builder, routes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)
def TopologyAddRoutes(builder, routes):
    """This method is deprecated. Please switch to AddRoutes."""
    return AddRoutes(builder, routes)
def StartRoutesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TopologyStartRoutesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRoutesVector(builder, numElems)
def End(builder): return builder.EndObject()
def TopologyEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)