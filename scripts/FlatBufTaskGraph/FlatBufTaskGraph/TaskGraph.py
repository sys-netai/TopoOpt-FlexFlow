# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatBufTaskGraph

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TaskGraph(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskGraph()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTaskGraph(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TaskGraph
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskGraph
    def Ngpupernode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TaskGraph
    def Nnode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TaskGraph
    def Nswitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TaskGraph
    def Intergpubw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TaskGraph
    def Drambw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TaskGraph
    def Netbw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TaskGraph
    def Conn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Connection import Connection
            obj = Connection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskGraph
    def ConnLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskGraph
    def ConnIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # TaskGraph
    def Ops(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Operator import Operator
            obj = Operator()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskGraph
    def OpsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskGraph
    def OpsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # TaskGraph
    def Tasks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Task import Task
            obj = Task()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskGraph
    def TasksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskGraph
    def TasksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # TaskGraph
    def Devices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Device import Device
            obj = Device()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskGraph
    def DevicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskGraph
    def DevicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # TaskGraph
    def Routes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Route import Route
            obj = Route()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskGraph
    def RoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskGraph
    def RoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # TaskGraph
    def Rings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatBufTaskGraph.Rings import Rings
            obj = Rings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskGraph
    def RingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskGraph
    def RingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def Start(builder): builder.StartObject(12)
def TaskGraphStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNgpupernode(builder, ngpupernode): builder.PrependUint32Slot(0, ngpupernode, 0)
def TaskGraphAddNgpupernode(builder, ngpupernode):
    """This method is deprecated. Please switch to AddNgpupernode."""
    return AddNgpupernode(builder, ngpupernode)
def AddNnode(builder, nnode): builder.PrependUint32Slot(1, nnode, 0)
def TaskGraphAddNnode(builder, nnode):
    """This method is deprecated. Please switch to AddNnode."""
    return AddNnode(builder, nnode)
def AddNswitch(builder, nswitch): builder.PrependUint32Slot(2, nswitch, 0)
def TaskGraphAddNswitch(builder, nswitch):
    """This method is deprecated. Please switch to AddNswitch."""
    return AddNswitch(builder, nswitch)
def AddIntergpubw(builder, intergpubw): builder.PrependFloat32Slot(3, intergpubw, 0.0)
def TaskGraphAddIntergpubw(builder, intergpubw):
    """This method is deprecated. Please switch to AddIntergpubw."""
    return AddIntergpubw(builder, intergpubw)
def AddDrambw(builder, drambw): builder.PrependFloat32Slot(4, drambw, 0.0)
def TaskGraphAddDrambw(builder, drambw):
    """This method is deprecated. Please switch to AddDrambw."""
    return AddDrambw(builder, drambw)
def AddNetbw(builder, netbw): builder.PrependFloat32Slot(5, netbw, 0.0)
def TaskGraphAddNetbw(builder, netbw):
    """This method is deprecated. Please switch to AddNetbw."""
    return AddNetbw(builder, netbw)
def AddConn(builder, conn): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(conn), 0)
def TaskGraphAddConn(builder, conn):
    """This method is deprecated. Please switch to AddConn."""
    return AddConn(builder, conn)
def StartConnVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskGraphStartConnVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConnVector(builder, numElems)
def AddOps(builder, ops): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ops), 0)
def TaskGraphAddOps(builder, ops):
    """This method is deprecated. Please switch to AddOps."""
    return AddOps(builder, ops)
def StartOpsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskGraphStartOpsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOpsVector(builder, numElems)
def AddTasks(builder, tasks): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tasks), 0)
def TaskGraphAddTasks(builder, tasks):
    """This method is deprecated. Please switch to AddTasks."""
    return AddTasks(builder, tasks)
def StartTasksVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskGraphStartTasksVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTasksVector(builder, numElems)
def AddDevices(builder, devices): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(devices), 0)
def TaskGraphAddDevices(builder, devices):
    """This method is deprecated. Please switch to AddDevices."""
    return AddDevices(builder, devices)
def StartDevicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskGraphStartDevicesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDevicesVector(builder, numElems)
def AddRoutes(builder, routes): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)
def TaskGraphAddRoutes(builder, routes):
    """This method is deprecated. Please switch to AddRoutes."""
    return AddRoutes(builder, routes)
def StartRoutesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskGraphStartRoutesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRoutesVector(builder, numElems)
def AddRings(builder, rings): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(rings), 0)
def TaskGraphAddRings(builder, rings):
    """This method is deprecated. Please switch to AddRings."""
    return AddRings(builder, rings)
def StartRingsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskGraphStartRingsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRingsVector(builder, numElems)
def End(builder): return builder.EndObject()
def TaskGraphEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)