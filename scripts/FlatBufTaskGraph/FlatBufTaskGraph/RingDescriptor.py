# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatBufTaskGraph

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RingDescriptor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RingDescriptor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRingDescriptor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RingDescriptor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RingDescriptor
    def Jumps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RingDescriptor
    def JumpsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RingDescriptor
    def JumpsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RingDescriptor
    def JumpsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def RingDescriptorStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddJumps(builder, jumps): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jumps), 0)
def RingDescriptorAddJumps(builder, jumps):
    """This method is deprecated. Please switch to AddJumps."""
    return AddJumps(builder, jumps)
def StartJumpsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RingDescriptorStartJumpsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartJumpsVector(builder, numElems)
def End(builder): return builder.EndObject()
def RingDescriptorEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)